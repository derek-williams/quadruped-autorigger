//----------------------------------------------------------------------------------------------
//
//	SCRIPT:			icQRcommonUtilities.mel
//
//	AUTHOR:			Ingo Clemens
//					www.braverabbit.de
//
//	DATE:			May 28, 2012
//					created: Jan 02, 2005
//
//----------------------------------------------------------------------------------------------

//----------------------------------------------------------------------------------------------
//
//	USE AND MODIFY AT YOUR OWN RISK!!
//
//----------------------------------------------------------------------------------------------


//----------------------------------------------------------------------------------------------
//
// add a message attribute with the given options to the given object
//
//----------------------------------------------------------------------------------------------

global proc icQRaddMsgAttr ( string $obj, int $multi, int $index, string $attrName,
									string $oldAttrName )
{
	//first check if there is already a message attribute; if, delete it to avoid
	//double connections when connection to the character group node

	//get all user defined attributes of the current object
	string $objAttrs[] = `listAttr -ud $obj`;
	for ($attr in $objAttrs)
	{
		//and see if the message attribute exists
		if ($oldAttrName != "" && `gmatch $attr $oldAttrName`)
		{
			deleteAttr ($obj + "." + $attr);
		}
	}

	//add the attribute only if it doesn't already exist
	if (!`attributeExists $attrName $obj`)
	{
		//now the attribute can be created
		if ($multi == 1)
		{
			addAttr -at message -m -im $index -ln $attrName $obj;
		}
		else
		{
			addAttr -at message -ln $attrName $obj;
		}
	}
}

//----------------------------------------------------------------------------------------------
//
// store the default control attributes
//
//----------------------------------------------------------------------------------------------

global proc icQRaddDefaultAttr ( string $ctrl )
{
	string $attrs[] = `listAttr -k -u $ctrl`;
    for ($attr in $attrs)
    {
        string $attrString = ("default_" + $attr);
        addAttr -ln $attrString -at "float" -k 0 $ctrl;
        setAttr ($ctrl + "." + $attrString) (`getAttr ($ctrl + "." + $attr)`);
        setAttr -l 1 ($ctrl + "." + $attrString);
    }
}

//----------------------------------------------------------------------------------------------
//
// creates a nurbs curve for a rotation control
//
//----------------------------------------------------------------------------------------------

global proc icQRbuildRotationControl ( float $scaleFactor, string $controlName )
{
	float $frontArrowPoints[] = {1.321, 0.988, 0.0, 1.518, 1.188, 0.0,
						1.65, 0.396, 0.0, 0.858, 0.528, 0.0, 1.059, 0.728, 0.0};
	float $backArrowPoints[] = {-1.321, 0.988, 0.0, -1.518, 1.188, 0.0,
						-1.65, 0.396, 0.0, -0.858, 0.528, 0.0, -1.059, 0.728, 0.0};

	string $curve1[];
	string $curve2[];
	string $arrow1 = "frontArrow";
	string $arrow2 = "backArrow";

	icQRbuildCurve ( $frontArrowPoints, 1, $scaleFactor, $arrow1 );
	icQRbuildCurve ( $backArrowPoints, 1, $scaleFactor, $arrow2 );

	$curve1 = `circle -c 0 0 0 -nr 0 0 1 -r (1.65 * $scaleFactor) -sw 106.4 -s 4 -ch 0`;
	$curve2 = `circle -c 0 0 0 -nr 0 0 1 -r (1.285 * $scaleFactor) -sw 111 -s 4 -ch 0`;

	setAttr ($curve1[0] + ".rz") -53.2;
	setAttr ($curve2[0] + ".rz") -55.5;

	makeIdentity -a 1 -t 1 -s 1 -r 1 $curve1[0];
	makeIdentity -a 1 -t 1 -s 1 -r 1 $curve2[0];

	reverseCurve -ch 0 -rpo 1 $arrow2;
	reverseCurve -ch 0 -rpo 1 $curve2[0];

	attachCurve -ch 0 -rpo 1 -kmk 0 -m 0 $curve1[0] $arrow1;
	delete $arrow1;
	attachCurve -ch 0 -rpo 1 -kmk 0 -m 0 $curve1[0] $curve2[0];
	delete $curve2[0];
	attachCurve -ch 0 -rpo 1 -kmk 0 -m 0 $curve1[0] $arrow2;
	delete $arrow2;

	rename $curve1[0] $controlName;
}

global proc icQRbuildOrientationControl ( float $scaleFactor, string $controlName )
{
	string $curve1[];
	string $curve2[];
	string $curve3[];
	string $elements[];

	$curve1 = `circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 8 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0`;
	$curve2 = `circle -c 0 0 0 -nr 1 0 0 -sw 360 -r 8 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0`;
	$curve3 = `circle -c 0 0 0 -nr 0 0 1 -sw 360 -r 8 -d 3 -ut 0 -tol 0.01 -s 8 -ch 0`;

	makeIdentity -a 1 -t 1 -s 1 -r 1 $curve1[0];
	makeIdentity -a 1 -t 1 -s 1 -r 1 $curve2[0];
	makeIdentity -a 1 -t 1 -s 1 -r 1 $curve3[0];

	parent -add -s (`listRelatives -s $curve2[0]`) $curve1[0];
	parent -add -s (`listRelatives -s $curve3[0]`) $curve1[0];

	delete $curve2[0];
	delete $curve3[0];

	rename $curve1[0] $controlName;
}

//----------------------------------------------------------------------------------------------
//
// creates a nurbs curve for a control
//
//----------------------------------------------------------------------------------------------

global proc icQRbuildCurve ( float $curvePoints[], int $degree,
						float $scaleFactor, string $controlName )
{
	int $pointNum = (size($curvePoints) / 3);

	//first scale the point position
	for ($i = 0; $i < size($curvePoints); $i ++)
	{
		$curvePoints[$i] = $curvePoints[$i] * $scaleFactor;
	}

	//create the command and execute
	string $baseCommand = ("curve -d " + $degree + " ");
	for ($p = 0; $p < size($curvePoints); $p += 3)
	{
		$baseCommand = ($baseCommand + "-p  " + $curvePoints[$p] + " " + $curvePoints[$p + 1] + " " + $curvePoints[$p + 2]);
	}

	rename (`eval $baseCommand`) $controlName;

	if ($degree == 3 && !`gmatch $controlName "*hip*"`)
	{
		closeCurve -ch 0 -ps 2 -rpo 1 $controlName;
	}
}

//----------------------------------------------------------------------------------------------
//
//  lock and hide channels that are not used or should not be displayed
//
//----------------------------------------------------------------------------------------------

global proc icQRlockHideAttr ( string $currentNode, string $channelArray )
{
	string $lhChannel[];

	int $count = `tokenize $channelArray "," $lhChannel`;

	for ($item in $lhChannel)
	{
		if (`attributeExists $item $currentNode`)
		{
			setAttr -k 0 -l 1 ($currentNode + "." + $item);
		}
	}
}

//----------------------------------------------------------------------------------------------
//
// unlock the given channels
//
//----------------------------------------------------------------------------------------------

global proc icQRunlockAttr ( string $currentNode, string $channelArray )
{
	string $lhChannel[];

	int $count = `tokenize $channelArray "," $lhChannel`;

	for ($item in $lhChannel)
	{
		setAttr -k 0 -l 0 ($currentNode + "." + $item);
	}
}

//----------------------------------------------------------------------------------------------
//
//  create an empty transform to hold the stretch curve values as an animation curve
//
//----------------------------------------------------------------------------------------------

global proc icQRaddStretchFactorContainer ( string $attr, int $mid, int $last, float $startVal,
												float $midVal, string $charName )
{
	string $scaleHolder = ("characterScale_grp" + $charName);
	if (!`objExists $scaleHolder`)
	{
		//create an empty group for the character scale
		rename (`CreateEmptyGroup`) $scaleHolder;
		//alias the scale y with the scale value name
		aliasAttr "rescale" ($scaleHolder + ".sy");
		connectAttr -f ($scaleHolder + ".rescale") ($scaleHolder + ".sx");
		connectAttr -f ($scaleHolder + ".rescale") ($scaleHolder + ".sz");
		icQRlockHideAttr ( $scaleHolder, "tx,ty,tz,rx,ry,rz,sx,sz,v");
		addAttr -ln "height" -at "float" -k 1 ("characterScale_grp" + $charName);
		addAttr -ln "limbsStretchScale" -k 1 -at "enum" -en "Curves:" $scaleHolder;
		setAttr -l 1 ($scaleHolder + ".limbsStretchScale");
	}

	addAttr -ln $attr -at "float" -k 1 $scaleHolder;
	setKeyframe -t 1 -v $startVal -itt "flat" -ott "flat" -at $attr $scaleHolder;
	setKeyframe -t $mid -v $midVal -itt "flat" -ott "flat" -at $attr $scaleHolder;
	setKeyframe -t $last -v $startVal -itt "flat" -ott "flat" -at $attr $scaleHolder;
}

//----------------------------------------------------------------------------------------------
//
//  creates a character set from the given elements
//
//----------------------------------------------------------------------------------------------

global proc icQRcreateCharSet ( string $charName, string $setName,
										int $prime , string $objList[] )
{
	string $keyableAttr[];
	string $nodeTypeString;

	select -cl;

	//
	//prepare for creating the subcharacter set
	//

	//check if the main character set exists
	if (!`objExists ("main_cs" + $charName)`)
	{
		//if it doesn't create an empty set
		character -n ("main_cs" + $charName) -em;
	}
	//check if the secondary character set exists
	if ($prime == 0 && !`objExists ("secondary_cs" + $charName)`)
	{
		//if it doesn't create an empty set
		character -n ("secondary_cs" + $charName) -em;
	}

	if ($prime == 1)
	{
		//set it as the active character set
		setCurrentCharacters ( {"main_cs" + $charName} );
	}
	else
	{
		//set it as the active character set
		setCurrentCharacters ( {"secondary_cs" + $charName} );
	}

	//
	//prepare for adding attributes to the subcharacter set
	//

	//check if the sub character set exists
	if (!`objExists ($setName + $charName)`)
	{
		//if it doesn't create an empty set
		doCreateSubcharacterArgList 2 { ($setName + $charName),"0","1","1","1","1","0" };
	}
	
	for ($obj in $objList)
	{
		//get all keyable attributes and put them into the subcharacter set
		//the listAttr command needs to be different for the constraint which comes
		//from the space switching of the hand/foot controls
		$nodeTypeString = `nodeType $obj`;
		if (!`gmatch $nodeTypeString "*Constraint*"`)
		{
			$keyableAttr = `listAttr -k -u $obj`;
		}
		else
		{
			$keyableAttr = `listAttr -o -hd -ud $obj`;
		}
		for ($attr in $keyableAttr)
		{
			character -add ($setName + $charName) ($obj + "." + $attr);
		}
	}

	//set the active character set to none
	setCurrentCharacters ( {} );
}

//----------------------------------------------------------------------------------------------
//
//  creates a group for the character elements
//
//----------------------------------------------------------------------------------------------

global proc icQRcreateGroup ( string $charName, string $grpName, int $vis )
{
	if (!`objExists ($grpName + $charName)`)
	{
		rename (`CreateEmptyGroup`) ($grpName + $charName);
		setAttr ($grpName + $charName + ".visibility") $vis;
		icQRlockHideAttr ( ($grpName + $charName), "tx,ty,tz,rx,ry,rz,sx,sy,sz,v");
	}
}

//----------------------------------------------------------------------------------------------
//
//	sets display ovverides with given arguments
//
//----------------------------------------------------------------------------------------------

global proc icQRdisplayOverride ( string $nodes[], int $dis, int $vis, int $clr )
{
	for ($item in $nodes)
	{
		setAttr ($item + ".overrideEnabled") 1;
		setAttr ($item + ".overrideDisplayType") $dis;
		setAttr ($item + ".overrideVisibility") $vis;
		setAttr ($item + ".overrideColor") $clr;		
	}
}

//----------------------------------------------------------------------------------------------
//
// pickwalk to the next connected control
//
//----------------------------------------------------------------------------------------------

global proc icQRpickWalk ( string $dir )
{
	string $selObj[] = `ls -sl`;
	string $obj = $selObj[0];
	string $linked[];

	if (`attributeExists ("charRigPickWalk" + $dir) $obj`)
	{
		//get the connected objects for pickwalking this direction
		$linked = `listConnections ($obj + ".charRigPickWalk" + $dir)`;
		if (size($linked) != 0)
		{
			select $linked[0];
		}
	}
}

//----------------------------------------------------------------------------------------------
//
// establish the pickwalking connections
//
//----------------------------------------------------------------------------------------------

global proc icQRpickWalkSetup ( string $objList )
{
	string $objArray[];

	tokenize $objList "," $objArray;

	for ($item in $objArray)
	{
		icQRaddMsgAttr ($item, 0, 0, "charRigPickWalkLeft", "");
		icQRaddMsgAttr ($item, 0, 0, "charRigPickWalkRight", "");
		icQRaddMsgAttr ($item, 0, 0, "charRigPickWalkUp", "");
		icQRaddMsgAttr ($item, 0, 0, "charRigPickWalkDown", "");
	}

	//if it's just one control (the hand or toes) there are no
	//sibling controls to connect to
	if (size($objArray) > 1)
	{
		for ($i = 0; $i < (size($objArray) - 1); $i ++)
		{
			connectAttr -f
				($objArray[$i] + ".charRigPickWalkDown")
				($objArray[$i + 1] + ".charRigPickWalkUp");
		}
	}
}

//----------------------------------------------------------------------------------------------
//
// toggle between default pickwalking and character rig pickwalking
//
//----------------------------------------------------------------------------------------------

global proc icQRcreateNameCommands ()
{
	nameCommand -ann "pickWalk next control left"
		-c "icQRpickWalk Left" quadRigPickWalkLeft;
	nameCommand -ann "pickWalk next control right"
		-c "icQRpickWalk Right" quadRigPickWalkRight;
	nameCommand -ann "pickWalk next control up"
		-c "icQRpickWalk Up" quadRigPickWalkUp;
	nameCommand -ann "pickWalk next control down"
		-c "icQRpickWalk Down" quadRigPickWalkDown;
}

global proc icQRtoggleExecute ()
{
	//if it's the default pickwalking change it to the charRig pick walk
	if (!`optionVar -q "icQRpickWalkSwitch"`)
	{
		hotkey -k Left -n "quadRigPickWalkLeft";
		hotkey -k Right -n "quadRigPickWalkRight";
		hotkey -k Up -n "quadRigPickWalkUp";
		hotkey -k Down -n "quadRigPickWalkDown";

		optionVar -iv "icQRpickWalkSwitch" 1;
		print "// Switched to Character Rigging Tool Pickwalking.\n";
	}
	//otherwise change it back to the default setting
	else
	{
		hotkey -k Left -n "NameComWalk_left_in_the_current_hierarchy";
		hotkey -k Right -n "NameComWalk_right_in_the_current_hierarchy";
		hotkey -k Up -n "NameComWalk_up_the_current_hierarchy";
		hotkey -k Down -n "NameComWalk_down_the_current_hierarchy";

		optionVar -iv "icQRpickWalkSwitch" 0;
		print "// Switched to Default Pickwalking.\n";
	}
}

//----------------------------------------------------------------------------------------------
//
// match the shape of the selected FK control from one side to the other
//
//----------------------------------------------------------------------------------------------

global proc icQRmatchControlShape ()
{
	string $charSide;
	string $charSideOpp;
	string $shape[];
	string $mirrorShape;
	float $pos[];
	int $spans;

	//get the selected joint
	string $sel[] = `ls -sl`;

	for ($ctrl in $sel)
	{
		//get the connected shape node
		$shape = `listRelatives -s $ctrl`;
		if ($shape[0] == "")
		{
			error "Please select a node with a curve as the shape node!";
		}
		if (`nodeType $shape[0]` != "nurbsCurve")
		{
			error "The shape node is not a nurbs curve!";
		}

		for ($shp in $shape)
		{
			$charSide = `substring $shp 1 2`;
			if ($charSide == "L_") $charSideOpp = "R_";
			if ($charSide == "R_") $charSideOpp = "L_";
			$mirrorShape = `substitute $charSide $shp $charSideOpp`;

			if (!`objExists $mirrorShape`)
			{
				error "The shape doesn't exist on the other side of the character!";
			}

			//get the number of CVs in the shape
			$spans = `getAttr ($shp + ".spans")`;
			for ($c = 0; $c < $spans + 1; $c ++)
			{
				$pos = `xform -q -ws -t ($shp + ".cv[" + $c + "]")`;
				move -a ($pos[0] * -1) $pos[1] $pos[2] ($mirrorShape + ".cv[" + $c + "]");
			}
		}
	}
}

//----------------------------------------------------------------------------------------------
//
// create and setup all necessary nodes to make the limb stretchy
//
//----------------------------------------------------------------------------------------------

global proc string[] icQRbuildStretch ( string $type, string $curve, string $jString,
										string $charName )
{
	string $arclengthNode;
	string $tempFrameCache;
	string $charScaleMultNode;
	string $charScaleDivNode;
	string $factorMultNode;
	string $tempUtilityNode;
	string $tempBlend;
	string $jointMultiplyCurve[];
	string $joints[];
	string $return[];
	string $prefix;
	float $aLength;
	float $powerVal1;
	float $powerVal2;

	$prefix = $type;
	if ($type == "neck")
	{
		$powerVal1 = -0.1;
		$powerVal2 = -0.3;
	}
	if ($type == "spine")
	{
		$powerVal1 = -0.2;
		$powerVal2 = -0.5;
	}

	//get the joint names and create an array
	tokenize $jString ":" $joints;
	//create an animation curve to drive the joint scale during stretching
	int $jointCount = `size($joints)`;
	icQRaddStretchFactorContainer ( $prefix,
				(($jointCount - 1) / 2), ($jointCount - 1), $powerVal1, $powerVal2, $charName );

	//create an arclength node to calculate the length of the spine curve
	$arclengthNode = `arclen -ch 1 $curve`;
	$arclengthNode = `rename $arclengthNode ($prefix + "_cInfo" + $charName)`;
	$aLength = `getAttr ($arclengthNode + ".arcLength")`;

	//create a multiply node to compensate for changes in length of the spine curve
	//due to rescaling the character
	$charScaleMultNode = `shadingNode -au multiplyDivide`;
	$charScaleMultNode = `rename $charScaleMultNode ("charScale_" + $prefix + "_compensate_mult" + $charName)`;
	setAttr ($charScaleMultNode + ".operation") 2;
	//connect the first input of the multiply node with the arclength
	connectAttr -f ($arclengthNode + ".arcLength") ($charScaleMultNode + ".input1X");
	//set the second input of the multiply node to 1
	setAttr ($charScaleMultNode + ".input2X") 1;

	//create a multiply node to create a stretch factor for the power curves
	$tempUtilityNode = `shadingNode -au multiplyDivide`;
	$tempUtilityNode = `rename $tempUtilityNode ($prefix + "StretchFactor_mult" + $charName)`;
	$factorMultNode = $tempUtilityNode;
	setAttr ($factorMultNode + ".operation") 2;
	connectAttr ($charScaleMultNode + ".outputX") ($factorMultNode + ".input1X");
	//set the second input to the curve info length
	setAttr ($factorMultNode + ".input2X") $aLength;

	//create a new blend color node for the spine volume user scale
	$tempBlend = `createNode blendTwoAttr`;
	$tempBlend = `rename $tempBlend ($prefix + "Volume_blend" + $charName)`;
	$return[size($return)] = $tempBlend;
	//set attr 1 to 1
	setAttr ($tempBlend + ".i[0]") 1;
	//connect the scale factor with attribute 2
	connectAttr -f ($factorMultNode + ".outputX") ($tempBlend + ".i[1]");

	//the setup has to add the stretchy behavior to each joint in the joint chain
	//the loop leaves out the first joint which can't be moved as the root of the spline ik
	for ($j = 0; $j < $jointCount; $j ++)
	{
		if ($j > 0)
		{
			setDrivenKeyframe 	-dv 1
								-v (`getAttr ($joints[$j] + ".tx")`)
								-itt "clamped" -ott "clamped"
								-cd ($factorMultNode + ".outputX")
								($joints[$j] + ".tx");
			setDrivenKeyframe 	-dv 2
								-v ((`getAttr ($joints[$j] + ".tx")`) * 2)
								-itt "clamped" -ott "clamped"
								-cd ($factorMultNode + ".outputX")
								($joints[$j] + ".tx");
			setAttr ($joints[$j] + "_translateX.preInfinity") 1;
			setAttr ($joints[$j] + "_translateX.postInfinity") 1;
		}

		//connect all joints for the stretch volume except the last
		if ($j < size($joints) - 1)
		{
			//create a frame cache node to read the animation curve
			$tempFrameCache = `createNode frameCache`;
			$tempFrameCache = `rename $tempFrameCache ($prefix + ($j + 1) + "Power_fCache" + $charName)`;
			setAttr ($prefix + ($j + 1) + "Power_fCache" + $charName + ".varyTime") ($j + 1);
			connectAttr ("characterScale_grp" + $charName + "." + $prefix)
						($prefix + ($j + 1) + "Power_fCache" + $charName + ".stream");
			
			//create a multiply node to power the stretch factor with the
			//volume curve factor that comes from the animation curve
			$tempUtilityNode = `shadingNode -au multiplyDivide`;
			$tempUtilityNode = `rename $tempUtilityNode ($prefix + "StretchVolume_mult" + ($j + 1) + $charName)`;
			$jointMultiplyCurve[$j] = $tempUtilityNode;
			setAttr ($jointMultiplyCurve[$j] + ".operation") 3;
			connectAttr ($tempBlend + ".o")
						($jointMultiplyCurve[$j] + ".input1X");
			//connect the respective animation curve value as the multiplyer
			connectAttr ($prefix + ($j + 1) + "Power_fCache" + $charName + ".varying")
						($jointMultiplyCurve[$j] + ".input2X");
			
			//connect the scale attributes of the joints with the scale factor
			connectAttr -f ($jointMultiplyCurve[$j] + ".outputX")
							($joints[$j] + ".sy");
			connectAttr -f ($jointMultiplyCurve[$j] + ".outputX")
							($joints[$j] + ".sz");

			//cleanup
			icQRlockHideAttr ( $tempUtilityNode, "i1x,i1y,i1z,i2x,i2y,i2z" );
		}
	}

	//control the volume of the root joint
	if ($type == "spine")
	{
		//find the axes that can be scaled
		//the second spine joint is down the aim axis of the root
		//that must be omit during scaling
		//get the down axis
		float $axisPos[] = `getAttr ($joints[0] + ".t")`;
		string $rootAxis[] = {"x","y","z"};
		int $axisID = 0;
		for ($v = 1; $v < size($axisPos); $v ++)
		{
			if ($axisPos[$v] > $axisPos[$axisID])
			{
				$axisID = $v;
			}
		}

		//create a multiply node to reduce the scale value with a power function
		string $scaleMultNode = `shadingNode -au multiplyDivide`;
		string $multName = ($type + "_rootScaleMult_" + $charName);
		$scaleMultNode = `rename $scaleMultNode $multName`;
		$return[size($return)] = $scaleMultNode;
		setAttr ($scaleMultNode + ".operation") 3;
		//connect the first input of the multiply node with the scale node
		connectAttr -f ($factorMultNode + ".outputX") ($scaleMultNode + ".input1X");
		//set the second input of the multiply node
		setAttr ($scaleMultNode + ".input2X") 0.3;
		for ($v = 0; $v < size($axisPos); $v ++)
		{
			if ($v != $axisID)
			{
				connectAttr -f ($scaleMultNode + ".outputX") ("root_jnt" + $charName + ".s" + $rootAxis[$v]);
			}
		}
	}

	//create a divide node to compensate for changes in length of the spine curve
	//due to rescaling the character
	//this time for avoiding double transformations on the spine curve itself
	$charScaleDivNode = `shadingNode -au multiplyDivide`;
	$charScaleDivNode = `rename $charScaleDivNode ("charScale_" + $prefix + "Curve_compensate_mult" + $charName)`;
	setAttr ($charScaleDivNode + ".operation") 2;
	setAttr ($charScaleDivNode + ".input1X") 1;
	//unlock the scale of the spine ik curve
	setAttr -l 0 ($curve + ".sx");
	setAttr -l 0 ($curve + ".sy");
	setAttr -l 0 ($curve + ".sz");
	//connect the divide node output to the curve scale of the spline ik
	connectAttr -f ($charScaleDivNode + ".outputX") ($curve + ".sx");
	connectAttr -f ($charScaleDivNode + ".outputX") ($curve + ".sy");
	connectAttr -f ($charScaleDivNode + ".outputX") ($curve + ".sz");

	//----------------------------------------------------------------------------------------
	//
	//cleanup
	//
	//----------------------------------------------------------------------------------------

	//the utility nodes
	icQRlockHideAttr ( $charScaleDivNode, "i1x,i1y,i1z,i2x,i2y,i2z" );
	icQRlockHideAttr ( $charScaleMultNode, "i1x,i1y,i1z,i2x,i2y,i2z" );
	icQRlockHideAttr ( $factorMultNode, "i1x,i1y,i1z,i2x,i2y,i2z" );

	return $return;
}
